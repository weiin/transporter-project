#ifndef EPOS_H
#define EPOS_H

/*
 *  epos class
 */

#include <fstream>
#include <stdexcept>
#include <stdint.h>

#include <fcntl.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <sys/stat.h>
#include <termios.h>
#include <unistd.h>
#include <errno.h>

#include <stdlib.h>
#include <sys/time.h>
#include <sstream>
#include <fcntl.h>
#include <iostream>

/* A class for interfacing to the epos controller
 */
  class EPOS
  {    	
	// serial port 
	int fd;
	const char *port;
	struct termios oldtio,newtio;
  	
	public: 
    	//! Enumeration of possible EPOS operational mode
   	enum OperationMode {
		STEPMODE = -6, 
		MASTER_ENCODER=-5, 
		DIAGNOSTIC=-4,
		CURRENT=-3,
		VELOCITY=-2,
		PROFILE_VELOCITY=3,
		PROFILE_POSITION=1,
		HOMING=6      
    	};

    	//! Enumeration of possible Motor Type

   	enum MotorType {
		BRUSHED_DC = 1, 
		EC_SINUS = 10, 
		EC_BLOCK = 11
    	};

	enum EncoderType
        {
		INCR_WITH_INDEX=1,
		INCR_NO_INDEX,
		HALL_SENSOR
        };

	enum MotionProfileType
        {
		TRAPEZOIDAL=0,
		SINUSOIDAL=1
        };

	// epos properties
  	short CurrentRegulatorPGain;
   	short CurrentRegulatorIGain;
  	unsigned short IncrementalEncoderCount;  // pulse per turn
   	unsigned short PositionSensorType;
   	unsigned short MotorType;
  	unsigned short MotorMaxContinuousCurrent;
   	unsigned short MotorMaxPeakCurrent;
   	unsigned int MaxFollowError;
   	short PositionPGain;
   	short PositionIGain;
   	short PositionDGain;
   	short VelocityPGain;
   	short VelocityIGain;
   	short ActualCurrent;
   	unsigned short StatusWord;
   	int ActualPosition;
  	int ActualVelocity;
   	unsigned int PositionProfileVelocity;
   	unsigned int MaxProfileVelocity;
   	unsigned int ProfileAcceleration;
   	unsigned int ProfileDeceleration;
   	unsigned int PositionProfileWindow;
   	unsigned short PositionProfileWindowTime;
   	int PositionProfileTargetPosition;
   	unsigned short ControlWord;
   	char OperationMode;
   	char MotionProfileType;
                
  	float CountPerDegree;        
  	float CountPerMM;        
   	float StraightAlignRatio;

	short CurrentModeSetting;
   	short RotationVelocity;
  	short IMURotationVelocity;
   	unsigned short ThermalTimeConstantWinding;

   	unsigned short RS232BaudRate;

	unsigned short data[20];
   	unsigned short resp[20];
  	unsigned short ndata;
  	unsigned char nodeid;
	unsigned char param[20];  	
	bool opened;
	bool installed;
	int polarity;
	int serialport_baudrate;

   	//! Constructor
  	EPOS();

 	// Destructor
   	~EPOS();

  	//! Open the port
   	/*! 
  	* This must be done before the epos can be used.
   	* 
	* \param port_name   A character array containing the name of the port
	*
    */
   	int openPort(const char *port_name);

   	//! Close the port
  	bool closePort();

	// Basic commands to read and write objects in EPSO70
	// calculate CRC
	unsigned short CRCCalc(unsigned short data[],unsigned short len);

	// check for Acknowledge
	bool checkAck();

	// check for reply opcode
	bool checkReplyOpCode();

	// read data
	bool readData(unsigned char buf[],int len);

	// read object in EPOS70
	bool readObject(unsigned char inxhigh, unsigned char inxlow, unsigned char subindex,unsigned char bparam[],int& lx);

	// write into object in EPOS70
	bool writeObject(unsigned char inxhigh, unsigned char inxlow, unsigned char subindex,unsigned char bparam[]);

	// get error
	unsigned int getError(unsigned char param[]);

	// Configuration commands
  	void GetCurrentRegulatorPGain();
	void SetCurrentRegulatorPGain(short pgain);
	void GetCurrentRegulatorIGain();
	void SetCurrentRegulatorIGain(short igain);
	void GetEncoderCount();
	void SetEncoderCount(unsigned short count);
	void GetEncoderType();
	void SetEncoderType(unsigned short type);
	void GetMotorType();
	void SetMotorType(unsigned short type);
	void GetMotorMaxContCurrent();
	void SetMotorMaxContCurrent(unsigned short amp);
	void GetMotorMaxPeakCurrent();
	void SetMotorMaxPeakCurrent(unsigned short amp);
	void GetMaxFollowError();
	void SetMaxFollowError(unsigned int error);
	void SetMaxProfileVelocity(unsigned int velocity);
	bool SetMotionProfileType(char profileType);
	void GetPositionPGain();
	void SetPositionPGain(short gain);
	void GetPositionIGain();
	void SetPositionIGain(short gain);
	void GetPositionDGain();
	void SetPositionDGain(short gain);
	void GetVelocityPGain();
	void SetVelocityPGain(short gain);
	void GetVelocityIGain();
	void SetVelocityIGain(short gain);
	void GetStatusWord();
	void SetStatusWord(unsigned short statuswd);
	bool GetControlWord();
	bool SetControlWord(unsigned short controlwd);
	void GetCurrentModeSetting();
	void SetCurrentModeSetting(short current);
	void GetThermalTimeConstantWinding();
	void SetThermalTimeConstantWinding(unsigned short time);
	void GetRS232BaudRate();
	void SetRS232BaudRate(unsigned short rate);

	// Motion Information commands
	void GetCurrent();
	bool GetPosition();
	void GetVelocity();
	void GetProfileAcceleration();
	void SetProfileAcceleration(unsigned int acceleration);
	void GetProfileDeceleration();
	void SetProfileDeceleration(unsigned int deceleration);

	// Profile Position Mode commands
	void GetPositionProfileVelocity();
	void SetPositionProfileVelocity(unsigned int velocity);
	void GetPositionWindow();
	void SetPositionWindow(unsigned int window);
	void GetPositionWindowTime();
	void SetPositionWindowTime(unsigned short time);
	void SetTargetPosition(int target);
	bool SetTargetVelocity(int velocity);

	// State Machine Commands	
	void MoveToEnableOperation(); // ok
	bool SetOperationMode(char mode); // ok

	//  Device Control Commands
	void ShutDown();  // ok
	void SwitchOn();  // ok
	void DisableOperation(); // ok
	void EnableOperation(); // ok
	bool FaultReset(); // ok
  };

#endif
